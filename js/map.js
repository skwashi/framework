function Map (filename) {
  this.filename = filename;
  this.data = null; // parsed json generated by Tiled
  this.width = 0; // width of map in px
  this.height = 0; // height of the map in px
  this.tilesets = []; 
  this.tileWidth = 0; 
  this.tileHeight = 0;
  this.numRows = 0;
  this.numColumns = 0; 
  this.tileLayers = []; // layers for generating the background map
  this.metaLayer = {}; // layer called "meta" with metainfo (e.g. collision)
  this.objectLayers = []; // for enemies, powerups, etc
  this.ready = false;
  this.canvas = null;
  this.context = null;
  this.propArray = null;
  this.colArray = null;

  this.getTileCoords = function (vector) {
    return {row: Math.floor(vector.y / this.tileHeight), 
	    col: Math.floor(vector.x / this.tileWidth)};
  };

  this.getGids = function (row, col) {
    return _.map(this.tileLayers, function (layer) {return layer.gids[row][col];});
  };

  this.getMetaGid = function (vector) {
    var tc = this.getTileCoords(vector);
    return this.metaLayer[tc.row][tc.col];
  };

  this.getTileRectangle = function (vector) {
    var tc = this.getTileCoords(vector);
    return new Rectangle(tc.col * this.tileWidth, tc.row * this.tileHeight,
			 this.tileWidth, this.tileHeight);
  };
  
  this.getTileset = function (gid) {
    var i = 0;
    var id = gid & 0x0FFFFFFF; // clear the upper bits
    while(id > this.tilesets[i].gids.last)
      i++;
    return this.tilesets[i];
  };

  this.getGidProperties = function (gid) {
    if (gid == 0)
      return {};
    var tileset = this.getTileset(gid);
    var offset = tileset.gids.first;
    if (tileset.hasOwnProperty("tileProperties") &&
	tileset.tileProperties.hasOwnProperty(gid-offset))
      return tileset.tileProperties[gid - offset];
    else
      return {};
  };

  this.getProperties = function(vector) {
    if (this.metaLayer.hasOwnProperty("gids"))
      return this.getGidProperties(this.metaGid(vector));
    else
      return {};
  };

  this.gidHasProperty = function (gid, property, value) {
    var props = this.getGidProperties(gid);
    if (value === undefined)
      return props.hasOwnProperty(property);
    else
      return (props.hasOwnProperty(property) &&
	      props[property] == value);
  };

  this.hasProperty = function(vector, property, value) {
    var gid = this.metaGid(vector);
    return this.gidHasProperty(gid);
  };
  
  this.load = function () {
    $.getJSON(filename).done($.proxy(this.loadData, this));	      
  };

  this.loadData = function(json) {
    this.data = json;
    this.tilesetsToLoad = json.tilesets.length;
    this.tileWidth = json.tilewidth;
    this.tileHeight = json.tileheight;
    this.numRows = json.height;
    this.numColumns = json.width;
    this.width = this.numColumns * this.tileWidth;
    this.height = this.numRows * this.tileHeight;
    this.canvas = document.createElement("canvas");
    this.canvas.width = this.width;
    this.canvas.height = this.height;
    this.context = this.canvas.getContext("2d");

    for (var i = 0, len = json.tilesets.length; i < len; i++) {
      this.tilesets[i] = {};
      this.tilesets[i].width = json.tilesets[i].imagewidth;
      this.tilesets[i].height = json.tilesets[i].imageheight;
      this.tilesets[i].tileWidth = json.tilesets[i].tilewidth;
      this.tilesets[i].tileHeight = json.tilesets[i].tileheight;
      this.tilesets[i].numTiles = 
	this.tilesets[i].width / json.tilesets[i].tilewidth
	* this.tilesets[i].height / json.tilesets[i].tileheight;
      this.tilesets[i].gids = {};
      this.tilesets[i].gids.first = json.tilesets[i].firstgid;
      this.tilesets[i].gids.last = 
	this.tilesets[i].gids.first + this.tilesets[i].numTiles - 1;
      this.tilesets[i].properties = json.tilesets[i].properties;
      if (json.tilesets[i].hasOwnProperty("tileproperties"))
	this.tilesets[i].tileProperties = json.tilesets[i].tileproperties;
      else
	this.tilesets[i].tileProperties = {};
      this.tilesets[i].image = $("<img />", {src: json.tilesets[i].image})[0];
      this.tilesets[i].image.onload = $.proxy(function () {
	this.tilesetsToLoad--;
	if (this.tilesetsToLoad == 0)
	  this.loadLayers();
      }, this);
    }
  };

  this.loadLayers = function() {
    var layer, gids;
    for (var m = 0, len = this.data.layers.length; m < len; m++) {
      layer = this.data.layers[m];
      if (layer.type == "objectgroup")
	this.objectLayers.push({name: layer.name, objects: layer.objects});
      else if (layer.type == "tilelayer") {
	gids = [];
	for (var i = 0; i < this.numRows; i++) {
	  gids[i] = [];
	  for (var j = 0; j < this.numColumns; j++) {
	    gids[i][j] = layer.data[this.numColumns*i + j];
	  }
	}
	if (false) //layer.name == "meta" || layer.name == "Meta")
	  this.metaLayer.gids = gids;
	else {
	  if (layer.hasOwnProperty("properties") && layer["properties"].hasOwnProperty("scale"))
	    var scale = layer.properties["scale"];
	  else
	    var scale = 1;
	  this.tileLayers.push({gids: gids, opacity: layer.opacity, scale: scale});
	}
      }
    }
    
    this.renderTileLayers();
  };
  
  this.renderTileLayer = function(layer) {
    var gid, id, tx, ty, x, y;
    var tw, th;
    var width = this.width;
    var height = this.height;
    var tileset;
    
    this.context.globalAlpha = layer.opacity;
    this.context.clearRect(0, 0, width, height);
    
    for (var row = 0; row < this.numRows; row++) {
      for (var col = 0; col < this.numColumns; col++) {
	
	gid = layer.gids[row][col];
	if (gid == 0)
	  continue;
	tileset = this.getTileset(gid);
	tw = tileset.tileWidth;
	th = tileset.tileHeight;
	id = gid & 0x0FFFFFFF; // clear the upper bits
	id -= tileset.gids.first;
	
	tx = (id % (tileset.width / tw))*tw;
	ty = ~~(id / (tileset.width / tw))*th;
	
	x = col * this.tileWidth;
	y = row * this.tileHeight;
	 
	this.context.drawImage(tileset.image, tx, ty, tw, th, x, y, tw, th);
      }
    }
    
    var image = new Image();
    image.src = this.canvas.toDataURL();
    layer.image = image;
    this.context.globalAlpha = 1;
  };

  this.renderTileLayers = function () {
    for (var l = 0, len = this.tileLayers.length; l < len; l++)
      this.renderTileLayer(this.tileLayers[l]);
    this.ready = true;
  };

  this.makeGrid = function (openX, openY) {
    return new Grid(this.width, this.height, this.tileWidth, this.tileHeight, openX, openY);
  };

  this.getImage = function (n) {
    return this.tileLayers[n].image;
  };
  
  this.getImages = function () {
    var images = [];
    for (var i = 0; i < this.tileLayers.length; i++)
      images.push(this.getImage(i));
  };
  
  this.getPicture = function(context, n) {
    return new Picture(this.tileLayers[n].image, context, this.tileLayers[n].scale);
  };

  this.getPictures = function(context) {
    var pictures = [];
    for (var i = 0; i < this.tileLayers.length; i++) {
      pictures.push(this.getPicture(context, i));
    }
    return pictures;
  };

  this.getScale = function (n) {
    return this.tileLayers[n].scale;
  };

  this.getOpacity = function (n) {
    return this.tileLayers[n].opacity;
  };

  this.makeCanvas = function (n) {
    var canvas = document.createElement("canvas");
    var context = canvas.getContext("2d");
    canvas.width = this.width;
    canvas.height = this.height;

    if (n === undefined) {
      for (var i = 0; i < this.tileLayers.length; i++)
	context.drawImage(this.tileLayers[i].image, 0, 0);
    } else {
      var layer = this.tileLayers[n];
      context.drawImage(layer.image, 0, 0);      
    }
    
    return canvas;
  };

  this.makeImage = function () {
    this.context.globalAlpha = 1;
    this.context.clearRect(0, 0, this.width, this.height);
    for (var i = 0; i < this.tileLayers.length; i++)
      this.context.drawImage(this.tileLayers[i].image, 0, 0);
    var image = new Image();
    image.src = this.canvas.toDataURL();
    return image;
  };  


  this.makePropArray = function () {
    var gid;
    var props;
    var propArray = [];

    for (var row = 0; row < this.numRows; row++) {
      propArray[row] = [];
      for (var col = 0; col < this.numColumns; col++) {
	propArray[row][col] = {};
	for (var i = 0, len = this.tileLayers.length; i < len; i++) {
	  gid = this.tileLayers[i].gids[row][col]
	  props = this.getGidProperties(gid);
	  propArray[row][col] = _.extend(propArray[row][col], props)
	}
	if (this.metaLayer.hasOwnProperty("gids")) {
	  gid = this.metaLayer.gids[row][col];
	  props = this.getGidProperties(gid);
	  propArray[row][col] = _.extend(propArray[row][col], props);
	}
      }
    }

    this.propArray = propArray;
  }; 

  this.getPropArray = function () {
    if (this.propArray == null)
      this.makePropArray();
    return this.propArray;
  };

  this.makeColArray = function () {
    var propArray = this.getPropArray();
    var colArray = [];    

    for (var row = 0; row < this.numRows; row++) {
      colArray[row] = _.map(propArray[row], function (props) { return (props.hasOwnProperty("collision")) ? 1 : 0; });
    }

    this.colArray = colArray;
  };

  this.getColArray = function () {
    if (this.colArray == null)
      this.makeColArray();
    return this.colArray;
  };

}

